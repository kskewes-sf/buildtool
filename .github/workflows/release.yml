name: Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  # Bump this when new releases require a newer Halyard version.
  MINIMUM_HALYARD_VERSION: "1.45"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies with pip
        run: |
          pip install -r dev/requirements.txt
          pip install -r dev/buildtool/requirements.txt
      - name: Setup git
        run: |
          git config --global user.email "sig-platform@spinnaker.io"
          git config --global user.name "Spinnaker GHA"

      - name: Assemble release info
        id: release_info
        run: |
          echo REPOSITORY_OWNER="${GITHUB_REPOSITORY%/*}" >> $GITHUB_OUTPUT
          tag="$( echo ${{ github.ref }} | sed 's@refs/tags/@@')"
          version="${tag##v}"
          echo "Running publish_spinnaker for version: ${version}"
          if [[ "${version}" == *-rc* ]]; then
            echo "Release candidate detected."
            echo IS_CANDIDATE="true" >> $GITHUB_OUTPUT
            echo VERSION="${version%%-rc*}" >> $GITHUB_OUTPUT
            echo "Version: ${version%%-rc*}"
          else
            echo IS_CANDIDATE="false" >> $GITHUB_OUTPUT
            echo VERSION="${version}" >> $GITHUB_OUTPUT
            echo "Version: ${version}"
          fi

      - name: Run dry_run of release
        run: |
          ./dev/buildtool.sh \
            publish_spinnaker \
            --spinnaker_version "${{ steps.release_info.outputs.VERSION }}" \
            --minimum_halyard_version "${{ env.MINIMUM_HALYARD_VERSION }}" \
            --github_owner "${{ steps.release_info.outputs.REPOSITORY_OWNER }}" \
            --dry_run true

      - name: Attach output files to GHA Job
        uses: actions/upload-artifact@v3
        with:
          name: spinnaker_release_${{ steps.release_info.outputs.VERSION }}
          path: |
            output/build_bom/*.yml
            output/publish_spinnaker/changelog.md
            output/update_versions/versions.yml

#       - name: Login to Google Cloud
#         # Only run this on repositories in the 'spinnaker' org, not on forks.
#         if: startsWith(github.repository, 'spinnaker/')
#         uses: 'google-github-actions/auth@v0'
#         # use service account flow defined at: https://github.com/google-github-actions/upload-cloud-storage#authenticating-via-service-account-key-json
#         with:
#           credentials_json: '${{ secrets.GAR_JSON_KEY }}'
#
#       - name: Upload halconfig profiles to GCS
#         # https://console.cloud.google.com/storage/browser/halconfig
#         # Only run this on repositories in the 'spinnaker' org, not on forks.
#         if: startsWith(github.repository, 'spinnaker/')
#         uses: 'google-github-actions/upload-cloud-storage@v0'
#         with:
#           path: 'halconfig/'
#           destination: 'halconfig/${{ steps.build_variables.outputs.REPO }}/${{ steps.release_info.outputs.RELEASE_VERSION }}'
#           parent: false
#
#       - name: Login to GAR
#         # Only run this on repositories in the 'spinnaker' org, not on forks.
#         if: startsWith(github.repository, 'spinnaker/')
#         uses: docker/login-action@v1
#         # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
#         with:
#           registry: us-docker.pkg.dev
#           username: _json_key
#           password: ${{ secrets.GAR_JSON_KEY }}
#
#       - name: Create release
#         if: steps.release_info.outputs.SKIP_RELEASE == 'false'
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: ${{ github.event.repository.name }} ${{ github.ref }}
#           body: |
#             ${{ steps.release_info.outputs.CHANGELOG }}
#           draft: false
#           prerelease: ${{ steps.release_info.outputs.IS_CANDIDATE }}
